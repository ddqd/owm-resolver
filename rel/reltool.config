%% -*- mode: erlang -*-
%% ex: ft=erlang
{sys, [
       {lib_dirs, ["../", "../deps"]},
       {erts, [{mod_cond, derived}, {app_file, strip}]},
       {app_file, strip},
       {rel, "owm_resolver", "1",
        [
            kernel,
            stdlib,
            sasl,
            syntax_tools,
            compiler,
            goldrush,
            lager,
            asn1,
            crypto,
            jsx,
            public_key, 
            ssl,
            inets,
            ranch,
            cowlib,
            cowboy,
            mnesia,
            stable,
            owm_resolver
        ]},
       {rel, "start_clean", "",
        [
         kernel,
         stdlib
        ]},
       {boot_rel, "owm_resolver"},
       {profile, embedded},
       {incl_cond, derived},
       {excl_archive_filters, [".*"]}, %% Do not archive built libs
       {excl_sys_filters, ["^bin/(?!start_clean.boot)",
                           "^erts.*/bin/(dialyzer|typer)",
                           "^erts.*/(doc|info|include|lib|man|src)"]},
       {excl_app_filters,   ["\.gitignore"]},
       {app, syntax_tools,  [{incl_cond, include}]},
       {app, compiler,      [{incl_cond, include}]},
       {app, goldrush,      [{incl_cond, include}]},
       {app, lager,         [{incl_cond, include}]},
       {app, asn1,          [{incl_cond, include}]},
       {app, crypto,        [{incl_cond, include}]},
       {app, jsx,           [{incl_cond, include}]},
       {app, public_key,    [{incl_cond, include}]},
       {app, ssl,           [{incl_cond, include}]},
       {app, inets,         [{incl_cond, include}]},
       {app, ranch,         [{incl_cond, include}]},
       {app, cowlib,        [{incl_cond, include}]},
       {app, cowboy,        [{incl_cond, include}]},
       {app, mnesia,        [{incl_cond, include}]},
       {app, stable,        [{incl_cond, include}]},
       {app, owm_resolver,  [{mod_cond, app}, {incl_cond,derived}, {lib_dir,"../"}]},
       {app, hipe,          [{incl_cond, exclude}]}
      ]}.

{target_dir, "owm_resolver"}.

{overlay, [
           {mkdir, "log/sasl"},
           {copy, "files/erl", "\{\{erts_vsn\}\}/bin/erl"},
           {copy, "files/nodetool", "releases/\{\{rel_vsn\}\}/nodetool"},
           {copy, "owm_resolver/bin/start_clean.boot",
                  "\{\{erts_vsn\}\}/bin/start_clean.boot"},
           {copy, "files/owm_resolver", "bin/owm_resolver"},
           {copy, "files/owm_resolver.cmd", "bin/owm_resolver.cmd"},
           {copy, "files/start_erl.cmd", "bin/start_erl.cmd"},
           {copy, "files/install_upgrade.escript", "bin/install_upgrade.escript"},
           {template, "files/owm_resolver", "bin/owm_resolver"},
           {template, "files/app.config", "etc/app.config"},
           {template, "files/vm.args", "etc/vm.args"}
          ]}.
